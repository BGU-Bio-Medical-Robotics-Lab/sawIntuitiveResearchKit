{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://github.com/jhu-dvrk/sawIntuitiveResearchKit/schemas/console.schema.json",
    "title": "dVRK console 2.0",
    "type": "object",
    "description": "Configuration file format for the dVRK console.  See [dVRK wiki](https://github.com/jhu-dVRK/sawIntuitiveResearchKit/wiki).  This format is used by the application `sawIntuitiveResearchKitQtConsoleJSON` and the ROS application `dvrk_robot dvrk_console_json`",
    "properties": {
	"io": {
	    "description": "Configuration for the input/output (IO)",
	    "type": "object",
	    "properties": {

		"port": {
		    "type":"string",
		    "description": "Port used communicate between the computer and the dVRK controllers.  Accepted values are \"fw\", \"fw:X\" (X is FireWire port), \"udp\" or \"udp:xx.xx.xx.xx\" (xx.xx.xx.xx is the IP address of the dVRK controller.  Default controller address is 169.254.0.100.  Values are parsed by `BasePort::ParseOptions` in library Amp1394.",
		    "pattern": "^fw$|^fw:[0-9]$|^udp$|^udp:[0-9]{2,3}.[0-9]{2,3}.[0-9]{2,3}.[0-9]{2,3}",
		    "examples": [
			{
			    "port": "udp"
			},
			{
			    "port": "fw"
			}
		    ]
		},

		"firewire-protocol": {
		    "type": "string",
		    "description": "Protocol used for all FireWire communications.  This applies wether the controllers are connected to the computer using FireWired or Ethernet (UDP with Link-Local).  This is an advanced setting and most users should avoid defining it.<ul><li>`sequential-read-write`: the PC reads data from each board (2 FPGA/QLA per controller), performs its computations (conversions, safety checks, PID, ...) and then writes sequentially to each board (N reads, N writes). This is the only protocol supported on older firmware (3 and below).<li>`sequential-read-broadcast-write`: the PC reads sequentially but performs a single write for all the boards. The write message is an array of values sent to the boards, each board access the data it needs by index (N reads, 1 write). This is the default protocol for the dVRK controllers with firmware 4 and above.<li>`broadcast-read-write`: the PC sends a single query/synchronization to all boards, read values are aggregated in single packet over the bus and there's a single write (1 query, 1 read, 1 write). This is the fastest protocol available but some FireWire cards seem to have trouble synchronizing the read packets. You will have to test it on your hardware to see if it supports this protocol or not.</ul>",
		    "enum": ["sequential-read-write", "sequential-read-broadcast-write", "broadcast-read-write"],
		    "default": "sequential-read-broadcast-write"
		},

		"footpedals": {
		    "type": "string",
		    "description": "IO configuration file used to define inputs from the foot pedals.  See files `sawRobotIO1394-*-foot-pedals.xml` in directory `share/io`.  The console use a search path that includes the `sawIntuitiveResearchKit/share` directory so you can specify any relative path from the `share` directory.",
		    "examples": [
			{
			    "footpedals": "io/sawRobotIO1394-MTMR-foot-pedals.xml"
			},
			{
			    "footpedals": "io/sawRobotIO1394-MTML-foot-pedals.xml"
			}
		    ]
		},

		"physical-footpedals-required": {
		    "type": "boolean",
		    "description": "Indicates if the console should have a foot pedal configuration file when one or more tele-operation components have been declared.  If the user doesn't want the physical foot pedals but had declared some tele-operation components, set this parameter to `false`.  The console will still need events emulating the foot pedals but these can be generated using the GUI or through ROS.",
		    "default": true
		},

		"period": {
		    "type": "number",
		    "description": "Periodicity for the IO and PID loop.  Defined in seconds, i.e. interval between two iterations.  The default is defined in `mtsIntuitiveResearchKit.h` and is set so the loop frequency is 1500Hz, ~0.66ms so 0.00066s.  This is an advanced setting and most users should avoid defining it.",
		    "minimum": 0.0,
		    "exclusiveMinimum": true,
		    "examples": [
			{
			    "period": 0.001
			}
		    ]
		},

		"watchdog-timeout": {
		    "type": "number",
		    "description": "Maximum laps of time allowed between to read/write access to the controller.  It is used to detect abnormally slow IOs or disconnected cables.  The value is sent to the controllers and the controllers will turn off power if the communication loop time exceeds the watchdog timeout.  Defined in seconds.  The default is defined in `mtsIntuitiveResearchKit.h` and is set to 30ms.  This is an advanced setting and most users should avoid defining it.  Setting it to zero disables the watchdog and should only be used by experts.  The maximum value is 300ms, i.e. 0.3s",
		    "minimum": 0.0,
		    "maximum": 0.3,
		    "examples": [
			{
			    "watchdog-timeout": 0.05
			}
		    ]
		},

		"configuration-files": {
		    "type": "array",
		    "description": "Extra configuration files to configure the IO component.  See examples in directory `share/io`.",
		    "items": {
			"type": "string"
		    }
		}
	    },

	    "additionalProperties": false
	},

	"operator-present": {
	    "type": "string",
	    "description": "IO configuration file used to define inputs for the da Vinci head sensor.  This requires a custom cable and will only work with a full da Vinci system.  The head sensor component was introduced in version 1.6.  See [dVRK wiki](https://github.com/jhu-dvrk/sawIntuitiveResearchKit/wiki/HeadSensor).",
	    "examples": [
		{
		    "operator-present": {
			"io": "io/sawRobotIO1394-MTMR-dv-head-sensor.xml"
		    }
		}
	    ]
	},

	"endoscope-focus": {
	    "type": "string",
	    "description": "IO configuration file used to define inputs for the da Vinci endoscope focus controllers.  This requires a custom cable and will only work with da Vinci focus controller.  The endoscope focus component was introduced in version 1.6.  See [dVRK wiki](https://github.com/jhu-dvrk/sawIntuitiveResearchKit/wiki/Endoscope-Focus-Controller).",
	    "examples": [
		{
		    "operator-present": {
			"io": "io/sawRobotIO1394-MTMR-dv-head-sensor.xml"
		    }
		}
	    ]
	},

	"component-manager": {
	    "description": "See *cisstMultiTask* [component manager](cisst-component-manager.html)"
	},

	"chatty": {
	    "type": "boolean",
	    "description": "Make the console say something useless when it starts.  It's mostly a way to test the text-to-speech feature.",
	    "default": false
	}

    }
}
